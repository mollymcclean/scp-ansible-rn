---
# Temporarily change the permission so the system_rancher user is able to read the openssl.cnf file.
- name: Create SSL configuration folder with private sub-folder.
  become: yes
  file:
    path: "{{ cert_from_ca_ssl_root_dir }}"
    state: directory
    owner: root
    group: root
    mode: 0750

- name: Create SSL configuration intermediate folder.
  become: yes
  file:
    path: "{{ cert_from_ca_ssl_intermediate_dir }}"
    state: directory
    owner: root
    group: root
    mode: 0750

- name: Check if certificates exist in {{ ca_certificates_bastion_dir }} on the Bastion server
  command: '/bin/ls -l {{ ca_certificates_bastion_dir }}'
  register: var_certificates_exist
  changed_when: False
  ignore_errors: True
  when: copy_certs_to_bastion

- name: Copy certificates to the Bastion server {{ ca_certificates_bastion_dir }} if not present
  copy:
    src: "{{ ca_certificates_source }}/"
    dest: "{{ ca_certificates_bastion_dir }}"
  when: var_certificates_exist is failed and copy_certs_to_bastion

- name: Check if certificates exist in {{ cert_from_ca_ssl_root_dir }} on the Bastion server
  become: yes
  command: '/bin/ls -l {{ cert_from_ca_ssl_root_dir }}/{{ cert_from_ca_chain_cert_pem }}'
  register: ssl_certificates_exist
  changed_when: False
  ignore_errors: True
  when: copy_certs_to_bastion

- name: Copy certificates to the Bastion server {{ cert_from_ca_ssl_root_dir }} if not present
  become: yes
  copy:
    src: "{{ ca_certificates_source }}/"
    dest: "{{ cert_from_ca_ssl_root_dir }}"
  when: ssl_certificates_exist is failed and copy_certs_to_bastion

- name: Install boto3 and botocore with pip module
  become: yes
  pip:
    name:
    - boto3
    - botocore
    executable: pip
  when: cert_from_ca_aws_env
  tags: ['online_install']

# Authentication comes from the machine IAM Profile
- name: Download all intermediate.key files required for signing (AWS)
  become: yes
  aws_s3:
    bucket: "{{ cert_from_ca_ssl_s3_bucket }}"
    object: "{{ cert_from_ca_s3_root }}/intermediate/private/{{ cert_from_ca_intermediate_key_pem }}"
    dest: "{{ cert_from_ca_ssl_intermediate_dir }}/{{ cert_from_ca_intermediate_key_pem }}"
    mode: get
  when: cert_from_ca_aws_env

- name: Download intermediate.cert.pem files required for signing (AWS)
  become: yes
  aws_s3:
    bucket: "{{ cert_from_ca_ssl_s3_bucket }}"
    object: "{{ cert_from_ca_s3_root }}/intermediate/certs/{{ cert_from_ca_intermediate_cert_pem }}"
    dest: "{{ cert_from_ca_ssl_intermediate_dir }}/{{ cert_from_ca_intermediate_cert_pem }}"
    mode: get
  when: cert_from_ca_aws_env

- name: Download ca-chain.cert.pem files required for signing (AWS)
  become: yes
  aws_s3:
    bucket: "{{ cert_from_ca_ssl_s3_bucket }}"
    object: "{{ cert_from_ca_s3_root }}/intermediate/certs/{{ cert_from_ca_chain_cert_pem }}"
    dest: "{{ cert_from_ca_ssl_root_dir }}/{{ cert_from_ca_chain_cert_pem_dest }}"
    mode: get
  when: cert_from_ca_aws_env
  
- name: Generate an OpenSSL private key with 4096 bits
  become: yes
  openssl_privatekey:
    path: "{{ cert_from_ca_rsa_private_key_path }}"
    size: 4096
    type: RSA

- name: Generate an OpenSSL Certificate Signing Request with Subject information
  become: yes
  openssl_csr:
    path: "{{ cert_from_ca_csr_path }}"
    privatekey_path: "{{ cert_from_ca_rsa_private_key_path }}"
    country_name: "{{ cert_from_ca_country_name }}"
    state_or_province_name: "{{ cert_from_ca_ssl_state_name }}"
    locality_name: "{{ cert_from_ca_locality_name }}"
    organization_name: "{{ cert_from_ca_organization_name }}"
    organizational_unit_name: "{{ cert_from_ca_organizational_unit_name }}"
    common_name: "{{ cert_from_ca_ssl_common_name }}"

- name: Generate an OpenSSL certificate signed with your own CA certificate
  become: yes
  openssl_certificate:
    path: "{{ cert_from_ca_cert_path }}"
    csr_path: "{{ cert_from_ca_csr_path }}"
    ownca_privatekey_path: "{{ cert_from_ca_ssl_intermediate_dir }}/{{ cert_from_ca_intermediate_key_pem }}"
    ownca_path: "{{ cert_from_ca_ssl_intermediate_dir }}/{{ cert_from_ca_intermediate_cert_pem }}"
    ownca_privatekey_passphrase: "{{ cert_from_ca_ca_privatekey_passphrase if cert_from_ca_ca_privatekey_passphrase != '' else omit }}"
    provider: ownca

- name: Create full chain certificate
  become: yes
  shell: "cat {{ cert_from_ca_cert_path }} {{ cert_from_ca_ssl_root_dir }}/{{ cert_from_ca_chain_cert_pem_dest }} > {{ cert_from_ca_ssl_certificate_fullchain }}"
  args:
    chdir: "{{ cert_from_ca_ssl_root_dir }}"