---
- name: Download RKE
  become: true
  get_url:
    url: "https://github.com/rancher/rke/releases/download/{{ rke_version }}/rke_linux-amd64"
    dest: /usr/bin/rke
  tags:
    - online_install

- name: Making RKE executable
  become: true
  file:
    dest: /usr/bin/rke
    mode: a+x

- name: Template installation configuration file
  become: yes
  become_user: "{{ rke_user_username }}"
  template:
    src: cluster.yml.j2
    dest: "/home/{{ rke_user_username }}/rancher-cluster.yml"
    owner: "{{ rke_user_username }}"
    group: "{{ rke_user_username }}"

# TODO: Ensure that the offline artifacts exist in harbor

# Provide temporary read access to allow system_rancher to read the openssl.cnf file.
- name: Provide temporary world read access to SSL configuration folder
  become: yes
  file:
    path: "{{ cert_from_ca_ssl_root_dir }}"
    state: directory
    mode: 0755

# TODO: Detect if the CSRs already exist? It's currently unclear what rancher's regeneration policy is!
- name: Generate CSRs for cluster
  become: yes
  become_user: "{{ rke_user_username }}"
  command: "rke cert generate-csr --config /home/{{ rke_user_username }}/rancher-cluster.yml"
  args:
    chdir: /home/{{ rke_user_username }}
  when: rke_use_custom_certs

# TODO: This can (and should) be generated by an ansible module instead of by a command. For now this was just copied
#       almost as is from rancher docs (we've added the subj argument only to avoid command line interaction)
- name: Generate service account token key pem
  become: yes
  become_user: "{{ rke_user_username }}"
  command: 
    openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout ./kube-service-account-token-key.pem
    -out ./kube-service-account-token.pem -subj '{{ rke_custom_service_account_key_subject }}'
  args:
    chdir: /home/{{ rke_user_username }}/rancher-cluster_certs
    # NOTE: THE LINE BELOW IS VERY IMPORTANT BECAUSE WE NEVER WANT TO REGENERATE THIS SECRET!! IF YOU REGENERATE THIS
    #       SECRET THEN YOU INVALIDATE ALL SERVICE ACCOUNT TOKENS IN THE ENTIRE CLUSTER. SO JUST DON'T TOUCH!!
    creates: kube-service-account-token-key.pem
  when: rke_use_custom_certs

# This is not necessary when we are manually copying our own certs to /var/tmp/
- name: Create SSL configuration intermediate folder (AWS)
  become: yes
  file:
    path: "{{ rke_custom_certificates_base_path }}"
    state: directory
    mode: 0750
  when: cert_from_ca_aws_env

- name: Install boto3 and botocore with pip module (AWS)
  become: yes
  pip:
    name:
      - boto3
      - botocore
    executable: pip
  when: cert_from_ca_aws_env
  tags: ['online_install']

- name: Download all intermediate.key files required for signing (AWS)
  become: yes
  aws_s3:
    bucket: "{{ cert_from_ca_ssl_s3_bucket }}"
    object: "{{ cert_from_ca_s3_root }}/intermediate/private/{{ cert_from_ca_intermediate_key_pem }}"
    dest: "{{ rke_custom_certificates_base_path }}/{{ rke_custom_certificates_ca_key_file }}"
    mode: get
  when: cert_from_ca_aws_env

- name: Download intermediate.cert.pem files required for signing (AWS)
  become: yes
  aws_s3:
    bucket: "{{ cert_from_ca_ssl_s3_bucket }}"
    object: "{{ cert_from_ca_s3_root }}/intermediate/certs/{{ cert_from_ca_intermediate_cert_pem }}"
    dest: "{{ rke_custom_certificates_base_path }}/{{ rke_custom_certificates_ca_crt_file }}"
    mode: get
  when: cert_from_ca_aws_env

- name: Download ca-chain.cert.pem files required for signing (AWS)
  become: yes
  aws_s3:
    bucket: "{{ cert_from_ca_ssl_s3_bucket }}"
    object: "{{ cert_from_ca_s3_root }}/intermediate/certs/{{ cert_from_ca_chain_cert_pem }}"
    dest: "{{ rke_custom_certificates_base_path }}/{{ cert_from_ca_chain_cert_pem_dest }}"
    mode: get
  when: cert_from_ca_aws_env

# Files taken from the docs at https://rancher.com/docs/rke/latest/en/installation/certs/
- name: Generate an OpenSSL certificate signed with the CA certificate
  become: yes
  openssl_certificate:
    path: "/home/{{ rke_user_username }}/rancher-cluster_certs/{{ item.cert_destination }}"
    csr_path: "/home/{{ rke_user_username }}/rancher-cluster_certs/{{ item.csr_path }}"
    ownca_privatekey_path: "{{ rke_custom_certificates_base_path }}/{{ rke_custom_certificates_ca_key_file }}"
    ownca_path: "{{ rke_custom_certificates_base_path }}/{{ rke_custom_certificates_ca_crt_file }}"
    ownca_privatekey_passphrase : "{{ rke_custom_certificates_privatekey_passphrase if rke_custom_certificates_privatekey_passphrase != '' else omit }}"
    provider: ownca
    owner: "{{ rke_user_username }}"
    group: "{{ rke_user_username }}"
  with_items:
    - name: Kube API
      cert_destination: kube-apiserver.pem
      csr_path: kube-apiserver-csr.pem
    - name: Kube Controller Manager
      cert_destination: kube-controller-manager.pem
      csr_path: kube-controller-manager-csr.pem
    - name: Kube Scheduler
      cert_destination: kube-scheduler.pem
      csr_path: kube-scheduler-csr.pem
    - name: Kube Proxy
      cert_destination: kube-proxy.pem
      csr_path: kube-proxy-csr.pem
    - name: Kube Admin
      cert_destination: kube-admin.pem
      csr_path: kube-admin-csr.pem
    - name: Kube Node
      cert_destination: kube-node.pem
      csr_path: kube-node-csr.pem
    - name: Api Server Proxy Client
      cert_destination: kube-apiserver-proxy-client.pem
      csr_path: kube-apiserver-proxy-client-csr.pem
  loop_control:
    label: "{{ item.name }}"
  when: rke_use_custom_certs

# Separate loop so we dynamically grab the IPs addresses.
- name: Generate an OpenSSL certificate signed with the CA certificate for ETCD Nodes
  become: yes
  openssl_certificate:
    path: "/home/{{ rke_user_username }}/rancher-cluster_certs/kube-etcd-{{ hostvars[item]['guest.ipAddress' if rke_provider == 'vsphere' else 'private_ip_address'] | replace ('.', '-') }}.pem"
    csr_path: "/home/{{ rke_user_username }}/rancher-cluster_certs/kube-etcd-{{ hostvars[item]['guest.ipAddress' if rke_provider == 'vsphere' else 'private_ip_address'] | replace ('.', '-') }}-csr.pem"
    ownca_privatekey_path: "{{ rke_custom_certificates_base_path }}/{{ rke_custom_certificates_ca_key_file }}"
    ownca_path: "{{ rke_custom_certificates_base_path }}/{{ rke_custom_certificates_ca_crt_file }}"
    ownca_privatekey_passphrase : "{{ rke_custom_certificates_privatekey_passphrase if rke_custom_certificates_privatekey_passphrase != '' else omit }}"
    provider: ownca
    owner: "{{ rke_user_username }}"
    group: "{{ rke_user_username }}"
  with_items: "{{ groups['type_rke'] | intersect(groups['type_env_' + environment_name]) }}"
  loop_control:
    label: "ETCD Node: {{ hostvars[item]['guest.ipAddress' if rke_provider == 'vsphere' else 'private_ip_address'] }}"
  when: rke_use_custom_certs

- name: Copy CA PEM files
  become: yes
  copy:
    src: "{{ rke_custom_certificates_base_path }}/{{ rke_custom_certificates_ca_crt_file }}"
    dest: "/home/{{ rke_user_username }}/rancher-cluster_certs/{{ item }}"
    owner: "{{ rke_user_username }}"
    group: "{{ rke_user_username }}"
    remote_src: "{{ rke_provider == 'aws' }}"
  with_items:
    - kube-ca.pem
    - kube-apiserver-requestheader-ca.pem
  when: rke_use_custom_certs

# Remove temporary read access granted to allow system_rancher to read the openssl.cnf file.
- name: Remove world read permission from SSL configuration folder
  become: yes
  file:
    path: "{{ cert_from_ca_ssl_root_dir }}"
    state: directory
    mode: 0750

- name: Configure key based access to RKE nodes for {{ rke_user_username }}
  become: yes
  become_user: "{{ rke_user_username }}"
  command: "sshpass -p {{ harbor_rancher_password }} ssh-copy-id  -i ~/.ssh/id_rsa.pub -o StrictHostKeyChecking=no {{ hostvars[item]['guest.ipAddress' if rke_provider == 'vsphere' else 'private_ip_address'] }}"
  with_items: "{{ groups['type_rke'] }}"

- name: Bring up cluster
  become: yes
  become_user: "{{ rke_user_username }}"
  command: "rke up --config /home/{{ rke_user_username }}/rancher-cluster.yml{{ ' --custom-certs --cert-dir /home/' + rke_user_username + '/rancher-cluster_certs' if rke_use_custom_certs else ''}}"
  async: 900
  poll: 5

- name: Create .kube directory
  file:
    path: "/home/{{ rke_kubectl_user }}/.kube"
    state: directory
    mode: '0755'
    owner: "{{ rke_kubectl_user }}"
    group: "{{ rke_kubectl_user }}"

- name: "Copy kubectl file to the {{ rke_kubectl_user }} user"
  become: true
  copy:
    src: "/home/{{ rke_user_username }}/kube_config_rancher-cluster.yml"
    dest: "/home/{{ rke_kubectl_user }}/.kube/config"
    remote_src: yes
    owner: "{{ rke_kubectl_user }}"
    group: "{{ rke_kubectl_user }}"